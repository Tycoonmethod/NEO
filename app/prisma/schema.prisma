generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/neo_app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js tables
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    language      String    @default("es") // 'es' or 'en'
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts Account[]
    sessions Session[]
    projects Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// NEO Core tables
model Project {
    id          String   @id @default(cuid())
    name        String
    description String?
    color       String   @default("#FFD700") // Golden default
    status      String   @default("active") // active, completed, paused
    startDate   DateTime?
    endDate     DateTime?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String

    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    worklines  Workline[]
    actions    Action[]
    meetings   Meeting[]
    files      File[]
}

model Workline {
    id        String   @id @default(cuid())
    name      String
    color     String   @default("#FFD700")
    order     Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    projectId String

    project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    actions Action[]
}

model Action {
    id             String    @id @default(cuid())
    title          String
    description    String?
    startDate      DateTime?
    endDate        DateTime?
    estimatedHours Int       @default(1) // 1, 2, or 3 people worth of hours
    status         String    @default("pending") // pending, in_progress, completed, critical
    priority       Int       @default(1) // 1-5 scale
    actualHours    Int?
    completedAt    DateTime?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    projectId      String
    worklineId     String?
    meetingId      String?

    project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    workline Workline? @relation(fields: [worklineId], references: [id], onDelete: SetNull)
    meeting  Meeting?  @relation(fields: [meetingId], references: [id], onDelete: SetNull)
}

model Meeting {
    id        String   @id @default(cuid())
    title     String
    summary   String?  @db.Text
    date      DateTime
    duration  Int?     // minutes
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    projectId String

    project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    files   File[]
    actions Action[]
}

model File {
    id           String   @id @default(cuid())
    name         String
    originalName String
    path         String
    mimeType     String
    size         Int
    type         String   // 'word', 'audio', 'csv', 'excel', 'pdf'
    processed    Boolean  @default(false)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    projectId    String
    meetingId    String?

    project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    meeting Meeting? @relation(fields: [meetingId], references: [id], onDelete: SetNull)
}
